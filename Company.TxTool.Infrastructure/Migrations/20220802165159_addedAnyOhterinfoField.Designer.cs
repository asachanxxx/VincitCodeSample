// <auto-generated />
using System;
using Cushwake.TreasuryTool.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cushwake.TreasuryTool.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220802165159_addedAnyOhterinfoField")]
    partial class addedAnyOhterinfoField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestBDepositLetter", b =>
                {
                    b.Property<int>("AccountOpenRequestId")
                        .HasColumnType("int")
                        .HasColumnName("AccountOpenRequestID");

                    b.Property<int>("SupportDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("SupportDocumentID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalAccountOpenRequestId")
                        .HasColumnType("int");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int?>("VirtualAccountOpenRequestId")
                        .HasColumnType("int");

                    b.HasKey("AccountOpenRequestId", "SupportDocumentId");

                    b.HasIndex("PhysicalAccountOpenRequestId");

                    b.HasIndex("SupportDocumentId");

                    b.HasIndex("TenantID");

                    b.HasIndex("VirtualAccountOpenRequestId");

                    b.ToTable("AccountOpenRequest_b_DepositLetter", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestBLetterToBank", b =>
                {
                    b.Property<int>("AccountOpenRequestId")
                        .HasColumnType("int")
                        .HasColumnName("AccountOpenRequestID");

                    b.Property<int>("SupportDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("SupportDocumentID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalAccountOpenRequestId")
                        .HasColumnType("int");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int?>("VirtualAccountOpenRequestId")
                        .HasColumnType("int");

                    b.HasKey("AccountOpenRequestId", "SupportDocumentId");

                    b.HasIndex("PhysicalAccountOpenRequestId");

                    b.HasIndex("SupportDocumentId");

                    b.HasIndex("TenantID");

                    b.HasIndex("VirtualAccountOpenRequestId");

                    b.ToTable("AccountOpenRequest_b_LetterToBank", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestBSupportingDocumentation", b =>
                {
                    b.Property<int>("AccountOpenRequestId")
                        .HasColumnType("int")
                        .HasColumnName("AccountOpenRequestID");

                    b.Property<int>("SupportDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("SupportDocumentID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicalAccountOpenRequestId")
                        .HasColumnType("int");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.HasKey("AccountOpenRequestId", "SupportDocumentId");

                    b.HasIndex("PhysicalAccountOpenRequestId");

                    b.HasIndex("SupportDocumentId");

                    b.HasIndex("TenantID");

                    b.ToTable("AccountOpenRequest_b_SupportingDocumentation", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestType", b =>
                {
                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MemberOrderKey")
                        .HasColumnType("int");

                    b.HasKey("TenantID", "Value");

                    b.ToTable("AccountOpenRequestType", "lkp");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.BaseAccountOpenRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountOpenRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NewId())");

                    b.Property<DateTime?>("Modified")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("TenantID", "Type");

                    b.HasIndex(new[] { "Status" }, "IX_AccountOpenRequest_Status");

                    b.HasIndex(new[] { "Type" }, "IX_AccountOpenRequest_Type");

                    b.ToTable("AccountOpenRequest", "app");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Audit.UserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserAuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActionedByEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ActionedById")
                        .HasColumnType("int")
                        .HasColumnName("ActionedByID");

                    b.Property<DateTime>("ActionedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailsAsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ActionedById");

                    b.HasIndex("TenantID");

                    b.HasIndex(new[] { "UserId" }, "IX_UserAudit_UserID");

                    b.ToTable("UserAudit", "audit");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Common.AppConfig", b =>
                {
                    b.Property<int>("AppConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppConfigID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppConfigId"), 1L, 1);

                    b.Property<string>("AppConfigCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AppConfigName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AppConfigText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("MemberOrderKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedbyId")
                        .HasColumnType("int");

                    b.HasKey("AppConfigId");

                    b.HasIndex("ModifiedbyId");

                    b.HasIndex(new[] { "AppConfigName" }, "IX_AppConfigName")
                        .IsUnique();

                    b.ToTable("AppConfig", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Common.ErrorMessage", b =>
                {
                    b.Property<int>("ErrorMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ErrorMessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorMessageId"), 1L, 1);

                    b.Property<string>("ErrorMessageCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ErrorMessageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ErrorMessageText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberOrderKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedbyId")
                        .HasColumnType("int");

                    b.HasKey("ErrorMessageId");

                    b.HasIndex(new[] { "ErrorMessageName" }, "IX_ErrorMessageName")
                        .IsUnique();

                    b.HasIndex(new[] { "ModifiedbyId" }, "IX_ModifiedByID");

                    b.ToTable("ErrorMessage", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Common.SupportDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupportDocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Created")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentTypeID");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NewId())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Modified")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedOn")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("TenantID");

                    b.HasIndex("UploadedBy");

                    b.ToTable("SupportDocument", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Common.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("TenantID");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("en-GB");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZoneName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Sri Lanka Standard Time");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminEmail" }, "UIX_AdminEmail")
                        .IsUnique();

                    b.HasIndex(new[] { "Code" }, "UIX_Code")
                        .IsUnique();

                    b.ToTable("Tenant", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Created")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<bool>("IsUnread")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Modified")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.Property<int?>("TargetEntityId")
                        .HasColumnType("int");

                    b.Property<string>("TargetEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("TenantID");

                    b.HasIndex(new[] { "OwnerId", "IsUnread" }, "IX_Notification_OwnderID_IsUnread");

                    b.ToTable("Notification", "app");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.BasePicklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Created")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberOrderKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("TenantID", "Type", "Name")
                        .IsUnique()
                        .HasDatabaseName("UIX_PicklistItem_TenantID_Type_Name");

                    b.HasIndex(new[] { "Type" }, "IX_PicklistItem_Type");

                    b.ToTable("PicklistItem", "lkp");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.PicklistType", b =>
                {
                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MemberOrderKey")
                        .HasColumnType("int");

                    b.HasKey("TenantID", "Value");

                    b.ToTable("PicklistType", "lkp");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ApplicationRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationRoleCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ApplicationRoleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CopiedFromApplicationRoleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandardRole")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberOrderKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.HasKey("Id");

                    b.HasIndex("CopiedFromApplicationRoleID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("ApplicationRole", "usr");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.ApplicationRoleBPermission", b =>
                {
                    b.Property<int>("ApplicationRoleId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationRoleID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("ApplicationRoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ApplicationRole_b_Permission", "usr");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Created")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberOrderKey")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<string>("PermissionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex(new[] { "PermissionCode" }, "UIX_PermissionCode")
                        .IsUnique();

                    b.ToTable("Permission", "usr");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicationRoleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Modified")
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RowModified")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("datetime2(2)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RowModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(user_name())");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserGraphId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserGraphID");

                    b.Property<string>("WorkEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("TenantID");

                    b.HasIndex(new[] { "ApplicationRoleID" }, "IX_ApplicationRoleID")
                        .IsUnique();

                    b.HasIndex(new[] { "UserGraphId" }, "IX_UserGraphID")
                        .IsUnique();

                    b.HasIndex(new[] { "WorkEmail" }, "IX_WorkEmail")
                        .IsUnique();

                    b.ToTable("User", "usr");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.PhysicalAccountOpenRequest", b =>
                {
                    b.HasBaseType("Cushwake.TreasuryTool.Domain.AccountOpenRequest.BaseAccountOpenRequest");

                    b.Property<string>("AccountGroup")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountGroupUpdatedOn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountTypeID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountOfOpeninigBalanceMovedToAccount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AnyOtherInfromation")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankRe1")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankRe2")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankReconciliationsToBePreparedById")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BankReconciliationsToBeReviewedById")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<string>("ClientRef")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrencyID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("DatabaseTypeID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAmountOfOpeningBalanceMovedIntoAccount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOpened")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegisterEntryCompleted")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSetupOnDatabase")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepositLetterLastLetterSent")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositLetterTenantRef")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayingInBooksToGoTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalBankAdminSortCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedCashbookID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReconciliationFrequency")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenancyReferenceNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrampsCashbookId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AccountTypeID");

                    b.HasIndex("BankReconciliationsToBePreparedById");

                    b.HasIndex("BankReconciliationsToBeReviewedById");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("DatabaseTypeID");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.VirtualAccountOpenRequest", b =>
                {
                    b.HasBaseType("Cushwake.TreasuryTool.Domain.AccountOpenRequest.BaseAccountOpenRequest");

                    b.Property<string>("AccountGroup")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountGroupUpdatedOn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<int?>("AccountTypeID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountOfOpeninigBalanceMovedToAccount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AnyOtherInfromation")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankRe1")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankRe2")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankReconciliationsToBePreparedById")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("BankReconciliationsToBeReviewedById")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<string>("ChartCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientRef")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrencyID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<int?>("DatabaseTypeID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAmountOfOpeningBalanceMovedIntoAccount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOpened")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegisterEntryCompleted")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSetupOnDatabase")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepositLetterLastLetterSent")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositLetterTenantRef")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalBankAdminSortCode")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostingRulesInBMAPDebtorClientRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedCashbookID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReconciliationFrequency")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenancyReferenceNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrampsCashbookId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VirtualAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AccountTypeID");

                    b.HasIndex("BankReconciliationsToBePreparedById");

                    b.HasIndex("BankReconciliationsToBeReviewedById");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("DatabaseTypeID");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.AccountType", b =>
                {
                    b.HasBaseType("Cushwake.TreasuryTool.Domain.Picklist.BasePicklistItem");

                    b.Property<string>("ReconciliationFrequency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.Currency", b =>
                {
                    b.HasBaseType("Cushwake.TreasuryTool.Domain.Picklist.BasePicklistItem");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.DatabaseType", b =>
                {
                    b.HasBaseType("Cushwake.TreasuryTool.Domain.Picklist.BasePicklistItem");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.DocumentType", b =>
                {
                    b.HasBaseType("Cushwake.TreasuryTool.Domain.Picklist.BasePicklistItem");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.PhysicalAccountType", b =>
                {
                    b.HasBaseType("Cushwake.TreasuryTool.Domain.Picklist.BasePicklistItem");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestBDepositLetter", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.AccountOpenRequest.PhysicalAccountOpenRequest", null)
                        .WithMany("DepositLetters")
                        .HasForeignKey("PhysicalAccountOpenRequestId");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.SupportDocument", "SupportDocument")
                        .WithMany()
                        .HasForeignKey("SupportDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequest_b_DepositLetter_SupportDocumentID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequestBDepositLetter_TenantID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.AccountOpenRequest.VirtualAccountOpenRequest", null)
                        .WithMany("DepositLetters")
                        .HasForeignKey("VirtualAccountOpenRequestId");

                    b.Navigation("SupportDocument");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestBLetterToBank", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.AccountOpenRequest.PhysicalAccountOpenRequest", null)
                        .WithMany("LettersToBank")
                        .HasForeignKey("PhysicalAccountOpenRequestId");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.SupportDocument", "SupportDocument")
                        .WithMany()
                        .HasForeignKey("SupportDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequest_b_LetterToBank_SupportDocumentID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequestBLetterToBank_TenantID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.AccountOpenRequest.VirtualAccountOpenRequest", null)
                        .WithMany("LettersToBank")
                        .HasForeignKey("VirtualAccountOpenRequestId");

                    b.Navigation("SupportDocument");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestBSupportingDocumentation", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.AccountOpenRequest.PhysicalAccountOpenRequest", null)
                        .WithMany("SupportingDocumentation")
                        .HasForeignKey("PhysicalAccountOpenRequestId");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.SupportDocument", "SupportDocument")
                        .WithMany()
                        .HasForeignKey("SupportDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequest_b_SupportingDocumentation_SupportDocumentID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequestBSupportingDocumentation_TenantID");

                    b.Navigation("SupportDocument");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestType", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequestType_TenantID");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.BaseAccountOpenRequest", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("FK_BaseAccountOpenRequest_CreatedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("FK_BaseAccountOpenRequest_ModifiedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequest_RequestedBy");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "ReviewedUser")
                        .WithMany()
                        .HasForeignKey("ReviewedBy")
                        .HasConstraintName("FK_AccountOpenRequest_ReviewedBy");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_BaseAccountOpenRequest_TenantID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.AccountOpenRequest.AccountOpenRequestType", null)
                        .WithMany()
                        .HasForeignKey("TenantID", "Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AccountOpenRequest_TenantID_Type");

                    b.Navigation("RequestedUser");

                    b.Navigation("ReviewedUser");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Audit.UserAudit", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ActionedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserAudit_ActionedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserAudit_TenantID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserAudit_UserID");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Common.AppConfig", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "Modifiedby")
                        .WithMany()
                        .HasForeignKey("ModifiedbyId");

                    b.Navigation("Modifiedby");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Common.ErrorMessage", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "Modifiedby")
                        .WithMany()
                        .HasForeignKey("ModifiedbyId");

                    b.Navigation("Modifiedby");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Common.SupportDocument", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("FK_SupportDocument_CreatedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_SupportDocument_DocumentTypeID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("FK_SupportDocument_ModifiedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SupportDocument_TenantID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SupportDocument_UploadedBy");

                    b.Navigation("DocumentType");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Notification.Notification", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("FK_Notification_CreatedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("FK_Notification_ModifiedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_OwnderID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_TenantID");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.BasePicklistItem", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("FK_BasePicklistItem_CreatedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("FK_BasePicklistItem_ModifiedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_BasePicklistItem_TenantID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.PicklistType", null)
                        .WithMany()
                        .HasForeignKey("TenantID", "Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PicklistItem_TenantID_Type");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Picklist.PicklistType", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PicklistType_TenantID");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.ApplicationRole", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.ApplicationRole", "CopiedFromApplicationRole")
                        .WithMany()
                        .HasForeignKey("CopiedFromApplicationRoleID")
                        .HasConstraintName("FK_ApplicationRole_CopiedFromApplicationRoleID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("FK_ApplicationRole_CreatedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("FK_ApplicationRole_ModifiedByID");

                    b.Navigation("CopiedFromApplicationRole");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.ApplicationRoleBPermission", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleBPermissions")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationRole_b_Permission_ApplicationRole");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationRole_b_Permission_Permission");

                    b.Navigation("ApplicationRole");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.Permission", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("FK_Permission_CreatedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("FK_Permission_ModifiedByID");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.User", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.ApplicationRole", "Role")
                        .WithOne()
                        .HasForeignKey("Cushwake.TreasuryTool.Domain.Security.User", "ApplicationRoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_ApplicationRoleID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("FK_User_CreatedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", null)
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("FK_User_ModifiedByID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Common.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_TenantID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.PhysicalAccountOpenRequest", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeID")
                        .HasConstraintName("FK_AccountOpenRequest_AccountTypeID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "BankReconciliationsToBePreparedByUser")
                        .WithMany()
                        .HasForeignKey("BankReconciliationsToBePreparedById")
                        .HasConstraintName("FK_AccountOpenRequest_BankReconciliationsToBePreparedById");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "BankReconciliationsToBeReviewedByUser")
                        .WithMany()
                        .HasForeignKey("BankReconciliationsToBeReviewedById")
                        .HasConstraintName("FK_AccountOpenRequest_BankReconciliationsToBeReviewedById");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .HasConstraintName("FK_AccountOpenRequest_CurrencyID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.DatabaseType", "DatabaseType")
                        .WithMany()
                        .HasForeignKey("DatabaseTypeID")
                        .HasConstraintName("FK_AccountOpenRequest_DatabaseTypeID");

                    b.Navigation("AccountType");

                    b.Navigation("BankReconciliationsToBePreparedByUser");

                    b.Navigation("BankReconciliationsToBeReviewedByUser");

                    b.Navigation("Currency");

                    b.Navigation("DatabaseType");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.VirtualAccountOpenRequest", b =>
                {
                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeID")
                        .HasConstraintName("FK_AccountOpenRequest_AccountTypeID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "BankReconciliationsToBePreparedByUser")
                        .WithMany()
                        .HasForeignKey("BankReconciliationsToBePreparedById")
                        .HasConstraintName("FK_AccountOpenRequest_BankReconciliationsToBePreparedById");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Security.User", "BankReconciliationsToBeReviewedByUser")
                        .WithMany()
                        .HasForeignKey("BankReconciliationsToBeReviewedById")
                        .HasConstraintName("FK_AccountOpenRequest_BankReconciliationsToBeReviewedById");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .HasConstraintName("FK_AccountOpenRequest_CurrencyID");

                    b.HasOne("Cushwake.TreasuryTool.Domain.Picklist.DatabaseType", "DatabaseType")
                        .WithMany()
                        .HasForeignKey("DatabaseTypeID")
                        .HasConstraintName("FK_AccountOpenRequest_DatabaseTypeID");

                    b.Navigation("AccountType");

                    b.Navigation("BankReconciliationsToBePreparedByUser");

                    b.Navigation("BankReconciliationsToBeReviewedByUser");

                    b.Navigation("Currency");

                    b.Navigation("DatabaseType");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.Security.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleBPermissions");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.PhysicalAccountOpenRequest", b =>
                {
                    b.Navigation("DepositLetters");

                    b.Navigation("LettersToBank");

                    b.Navigation("SupportingDocumentation");
                });

            modelBuilder.Entity("Cushwake.TreasuryTool.Domain.AccountOpenRequest.VirtualAccountOpenRequest", b =>
                {
                    b.Navigation("DepositLetters");

                    b.Navigation("LettersToBank");
                });
#pragma warning restore 612, 618
        }
    }
}
